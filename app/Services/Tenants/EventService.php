<?php

namespace App\Services\Tenants;

use App\Models\Tenants\Event;
use App\Http\Requests\StoreEvent;
use App\Http\Requests\UpdateEvent;

class EventService
{
    /**
     * This is used during the creation of a new event.
     *
     * @param StoreEvent $request
     * @return Event
     */
    public function storeEvent(StoreEvent $request)
    {
        $event = new Event();
        $event->title = $request->title;
        $event->description = $request->description;
        $event->start_date = $request->start_date;
        $event->start_time = $request->start_time;
        $event->end_date = $request->end_date;
        $event->end_time = $request->end_time;
        $event->banner_image_link = $request->banner_image_link;

        $event->save();

        return $event;
    }

    /**
     * This is used during the update of an existing event.
     *
     * @param UpdateEvent $request
     * @param Event $event
     * @return mixed
     */
    public function updateEvent(UpdateEvent $request, Event $event)
    {
        $event->title = $request->title;
        $event->slug = null; // Emptied to null in order for a new slug to be generated by sluggable
        $event->description = $request->description;
        $event->start_date = $request->start_date;
        $event->start_time = $request->start_time;
        $event->end_date = $request->end_date;
        $event->end_time = $request->end_time;
        $event->banner_image_link = $request->banner_image_link;

        $event->save();

        return $event;
    }

    /**
     * This is used during the destruction of an existing event.
     *
     * @param Event $event
     * @throws \Exception
     */
    public function destroyEvent(Event $event)
    {
        $this->delete($event);
    }

    /**
     * This returns a collection of all the events.
     *
     * @return Event[]|\Illuminate\Database\Eloquent\Collection
     */
    public function getAll()
    {
        return Event::all();
    }

    /**
     * This is used to grab an event based on slug.
     *
     * @param $slug
     * @return mixed
     */
    public function getBySlug($slug)
    {
        return Event::where('slug', $slug)->first();
    }

    /**
     * This is used to grab an event based on id.
     *
     * @param $id
     * @return mixed
     */
    public function getById($id)
    {
        return Event::find($id);
    }

    /**
     * Delete the given tenant.
     *
     * @param Event $event
     * @throws \Exception
     */
    public function delete(Event $event)
    {
        $event->delete();
    }
}
